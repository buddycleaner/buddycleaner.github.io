{"version":3,"sources":["config.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","firebaseConfig","App","props","state","email","message","error","gdpr","handleSubmit","bind","handleChange","handlGdprChange","evt","this","setState","target","value","checked","preventDefault","collection","add","timestamp","FieldValue","serverTimestamp","then","resp","console","log","catch","messageClass","length","className","onSubmit","Control","required","type","placeholder","onChange","Check","id","label","size","variant","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iVAAaA,EAAW,CACpBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,GACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gBCGbC,G,YADcT,gBAAuBU,GACbD,aAmHfE,E,YAhHb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CAAEC,MAAO,GAAIC,QAAS,GAAIC,OAAO,EAAOC,MAAM,GAE3D,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBAPN,E,0EAUNG,GACXC,KAAKC,SAAS,CACZV,MAAOQ,EAAIG,OAAOC,U,sCAINJ,GACdC,KAAKC,SAAS,CACZP,KAAMK,EAAIG,OAAOE,Y,mCAIRL,GAAM,IAAD,OAChBA,EAAIM,iBAGJL,KAAKC,SAAS,CACZR,OAAO,EACPD,QAAS,KANK,MASQQ,KAAKV,MAArBC,EATQ,EASRA,MATQ,EASDG,KAEfR,EACCoB,WAAW,aACXC,IAAI,CACHhB,QACAiB,UAAW/B,YAAmBgC,WAAWC,oBAE1CC,MAAK,SAAAC,GACJC,QAAQC,IAAR,6BAAkCvB,EAAlC,yBAAgEqB,GAEhE,EAAKX,SAAS,CACZV,MAAO,GACPC,QAAS,6BACTE,MAAM,OAGTqB,OAAM,SAAAtB,GACLoB,QAAQpB,MAAR,2DAC4CF,EAD5C,eAEEE,GAEF,EAAKQ,SAAS,CACZT,QAAS,gDACTC,OAAO,S,+BAMX,IAAIuB,EAAe,OAKnB,OAJIhB,KAAKV,MAAME,QAAQyB,SACrBD,GAAgBhB,KAAKV,MAAMG,MAAQ,iBAAmB,qBAItD,yBAAKyB,UAAU,OACb,6BAASA,UAAU,cACjB,wBAAIA,UAAU,cAAd,eACA,uBAAGA,UAAU,QAAb,8DAGA,kBAAC,IAAD,CAAMA,UAAU,iBAAiBC,SAAUnB,KAAKL,cAC9C,kBAAC,IAAKyB,QAAN,CACEC,UAAQ,EACRC,KAAK,OACLC,YAAY,oBACZL,UAAU,yCACVf,MAAOH,KAAKV,MAAMC,MAClBiC,SAAUxB,KAAKH,eAGjB,kBAAC,IAAK4B,MAAN,CACEJ,UAAQ,EACRC,KAAK,WACLI,GAAG,OACHC,MAAM,0DACNT,UAAU,OACVU,KAAK,KACLxB,QAASJ,KAAKV,MAAMI,KACpB8B,SAAUxB,KAAKF,kBAGjB,kBAAC,IAAD,CACE+B,QAAQ,UACRX,UAAU,sBACVI,KAAK,UAHP,kBASAtB,KAAKV,MAAME,SACb,uBAAG0B,UAAWF,GAAgBhB,KAAKV,MAAME,e,GAzGjCsC,IAAMC,WCDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.3fdbdce3.chunk.js","sourcesContent":["export const firebase = {\n    apiKey: \"AIzaSyA9ZTOi5zORbbSrrfKKwfmE1_v3HDqzxrI\",\n    authDomain: \"buddy-cleaner.firebaseapp.com\",\n    databaseURL: \"https://buddy-cleaner.firebaseio.com\",\n    projectId: \"buddy-cleaner\",\n    storageBucket: \"\",\n    messagingSenderId: \"508996475374\",\n    appId: \"1:508996475374:web:4893d5c4c75b84facb96ff\",\n    measurementId: \"G-YW7L4CD8KT\"\n}\n\nexport default { firebase }","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nimport * as firebase from \"firebase/app\";\nimport { firebase as firebaseConfig } from \"./config\";\nimport \"firebase/firestore\";\n\nimport \"./App.scss\";\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst firestore = firebaseApp.firestore();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { email: \"\", message: \"\", error: false, gdpr: false };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handlGdprChange = this.handlGdprChange.bind(this);\n  }\n\n  handleChange(evt) {\n    this.setState({\n      email: evt.target.value\n    });\n  }\n\n  handlGdprChange(evt) {\n    this.setState({\n      gdpr: evt.target.checked\n    })\n  }\n\n  handleSubmit(evt) {\n    evt.preventDefault();\n\n    //clean up previous errors\n    this.setState({\n      error: false,\n      message: '',\n    });\n\n    const { email, gdpr } = this.state;\n\n    firestore\n    .collection(\"subscribe\")\n    .add({\n      email,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    .then(resp => {\n      console.log(`document for email ${email} created with success`, resp);\n\n      this.setState({\n        email: \"\",\n        message: \"Thank you for subscribing!\",\n        gdpr: false,\n      });\n    })\n    .catch(error => {\n      console.error(\n        `ðŸ’¥ failed to create document for email ${email} with error`,\n        error\n      );\n      this.setState({\n        message: \"Failed to submit the email, please try again!\",\n        error: true,\n      });\n    });\n  }\n\n  render() {\n    let messageClass = \"mt-5\";\n    if (this.state.message.length) {\n      messageClass += this.state.error ? ' error-message' : ' feedback-message';\n    }\n\n    return (\n      <div className=\"App\">\n        <section className=\"App-header\">\n          <h1 className=\"title mb-0\">Coming Soon</h1>\n          <p className=\"text\">\n            Buddy cleaner will revolutionize households domestic tasks\n          </p>\n          <Form className=\"subscribe-form\" onSubmit={this.handleSubmit}>\n            <Form.Control\n              required\n              type=\"text\"\n              placeholder=\"example@email.com\"\n              className=\"mt-5 mb-2 text-center  ml-auto mr-auto\"\n              value={this.state.email}\n              onChange={this.handleChange}\n            />\n\n            <Form.Check\n              required\n              type=\"checkbox\"\n              id=\"gdpr\"\n              label=\"I would like to subscribe to updates from Buddy Cleaner\"\n              className=\"gdpr\"\n              size=\"sm\"\n              checked={this.state.gdpr}\n              onChange={this.handlGdprChange}\n            />\n\n            <Button\n              variant=\"primary\"\n              className=\"subscribe-btn w-100\"\n              type=\"submit\"\n            >\n              Subscribe now\n            </Button>\n          </Form>\n\n          { this.state.message &&\n          <p className={messageClass}>{ this.state.message }</p>\n          }\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}